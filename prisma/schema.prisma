// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Game {
  id          String   @id @default(cuid())
  name        String
  shortName   String
  icon        String
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  services    Service[]
  ranks       Rank[]
  orders      Order[]
}

model Service {
  id          String   @id @default(cuid())
  gameId      String
  name        String
  description String
  icon        String
  features    String   // JSON string for features array
  popular     Boolean  @default(false)
  estimatedTime String
  basePrice   Int      // Price in cents
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  orders      Order[]
}

model Rank {
  id        String   @id @default(cuid())
  gameId    String
  name      String
  tier      String
  division  String
  lp        Int
  color     String
  icon      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  currentOrders Order[] @relation("CurrentRank")
  targetOrders  Order[] @relation("TargetRank")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  gameId          String
  serviceId       String
  currentRankId   String
  targetRankId    String
  status          OrderStatus @default(PENDING)
  price           Int         // Price in cents
  estimatedTime   String
  actualTime      String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  game            Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  service         Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  currentRank     Rank        @relation("CurrentRank", fields: [currentRankId], references: [id], onDelete: Cascade)
  targetRank      Rank        @relation("TargetRank", fields: [targetRankId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFUNDED
}
