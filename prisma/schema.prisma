// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_POSTGRES_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  
  // Booster specific fields
  isAvailable   Boolean   @default(true)
  maxOrders     Int       @default(3)
  rating        Float     @default(5.0)
  completedOrders Int     @default(0)
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]   // Müşteri olarak verdiği siparişler
  boostJobs     Order[]   @relation("BoosterOrders") // Booster olarak aldığı işler
  notifications Notification[]
  notificationPreference NotificationPreference?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  BOOSTER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id                    String   @id @default(cuid())
  userId                String   // Sipariş veren müşteri
  user                  User     @relation(fields: [userId], references: [id])
  
  // Booster assignment
  boosterId             String?  // Atanan booster
  booster               User?    @relation("BoosterOrders", fields: [boosterId], references: [id])
  assignedAt            DateTime?
  startedAt             DateTime?
  
  // Game details
  game                  String   // lol, valorant
  currentRank           String
  currentDivision       String?
  targetRank            String
  targetDivision        String?
  
  // Pricing
  price                 Float
  currency              String   @default("TRY")
  boosterEarnings       Float?   // Booster'ın kazancı
  
  // Payment
  stripeSessionId       String?  @unique
  stripePaymentIntentId String?
  paymentStatus         PaymentStatus @default(PENDING)
  
  // Order status
  orderStatus           OrderStatus @default(PENDING)
  
  // Progress tracking
  progress              Int      @default(0) // 0-100
  estimatedHours        Int?     // Tahmini süre (saat)
  actualHours           Int?     // Gerçek süre
  
  // Communication
  notes                 String?  // Booster notları
  customerFeedback      String?  // Müşteri geri bildirimi
  customerRating        Int?     // Müşteri değerlendirmesi (1-5)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paidAt    DateTime?
  completedAt DateTime?
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING      // Sipariş verildi, ödeme bekleniyor
  PAID         // Ödeme tamamlandı, booster atanıyor
  ASSIGNED     // Booster atandı
  IN_PROGRESS  // Boost devam ediyor
  COMPLETED    // Boost tamamlandı
  CANCELLED    // Sipariş iptal edildi
}

model Notification {
  id          String               @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  data        String?              @default("{}")
  read        Boolean              @default(false)
  readAt      DateTime?
  channels    String               @default("[\"in_app\"]")
  priority    NotificationPriority @default(NORMAL)
  actionUrl   String?
  createdAt   DateTime             @default(now())
  expiresAt   DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
  @@index([userId, createdAt])
  @@index([type])
}

enum NotificationType {
  ORDER_CREATED
  ORDER_PAYMENT_CONFIRMED
  ORDER_BOOSTER_ASSIGNED
  ORDER_STARTED
  ORDER_PROGRESS_UPDATE
  ORDER_COMPLETED
  ORDER_CANCELLED
  BOOST_JOB_ASSIGNED
  BOOST_JOB_REMINDER
  BOOST_JOB_DEADLINE
  BOOST_PAYMENT_PROCESSED
  MESSAGE_RECEIVED
  CHAT_SUPPORT_REPLY
  SYSTEM_MAINTENANCE
  SYSTEM_UPDATE
  ACCOUNT_UPDATE
  SECURITY_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model NotificationPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  
  emailEnabled      Boolean @default(true)
  pushEnabled       Boolean @default(true)
  inAppEnabled      Boolean @default(true)
  
  orderUpdates      Boolean @default(true)
  boostUpdates      Boolean @default(true)
  messages          Boolean @default(true)
  marketing         Boolean @default(false)
  systemUpdates     Boolean @default(true)
  
  quietHoursEnabled Boolean @default(false)
  quietHoursStart   String?
  quietHoursEnd     String?
  
  pushTokens        String  @default("[]")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}